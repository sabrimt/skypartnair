<?php/** * Description of Blog * * @author PA */class Blog extends CI_Controller {	    public function __construct() {        parent::__construct();				if(!$this->auth_user->is_connected){			redirect('mkadmin/dashboard');			exit;		}		        $this->load->model('Article_model', 'artMgr');        $this->layout->setTheme('dashboard');		$this->load->library("pagination");    }	    public function index() {        $this->listDisplay();    }    public function listDisplay() {        $data = array();        $data['nb_article'] = $this->countArticle();		$data['add_btn'] = anchor('mkadmin/blog/articlemanager/', 'Ajouter un article', array("class" => "btn marg grey darken-4"));				// PAGINATION		$config = array();		$config['base_url'] = base_url('mkadmin/blog/index/');		$config['total_rows'] = $data['nb_article'];		$config['per_page'] = 10;		$config["uri_segment"] = 3;		$config["num_links"] = 2;		$config["use_page_numbers"] = FALSE;		$config["full_tag_open"] = "<div class='pagination-full valign-wrapper'>";		$config["full_tag_close"] = "</div>";		$config["cur_tag_open"] = "<span class='pagination-current circle black white-text'><strong>";		$config["cur_tag_close"] = "</strong></span>";		$config["prev_link"] = "&#xE408;";		$config["prev_tag_open"] = "<i class='material-icons'>";		$config["prev_tag_close"] = "</i>";		$config["next_link"] = "&#xE409;";		$config["next_tag_open"] = "<i class='material-icons'>";		$config["next_tag_close"] = "</i>";					$this->pagination->initialize($config);		$page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;				// BASE		//		$data['add_btn'] = anchor('mkadmin/blog/articlemanager/', 'Ajouter un article', array("class" => "btn grey darken-4"));        $data['articles'] = $this->artMgr->articleList("article_date desc", ['limit'=>$config['per_page'], 'start'=>$page]);				$data['pagination'] = $this->pagination->create_links();        foreach ($data['articles'] as $article) {            $article->article_date = date_cvt($article->article_date, 'fr', FALSE);        }        $this->layout->addCss('delete_confirm');		$this->layout->addJs('delete_confirm');		$this->layout->views('delete_confirm');        $this->layout->view('admin/blog',$data);    }    public function articleManager($id = null) {		$this->layout->addJs("modal");		$this->layout->addJs('wysimce');		        $form_data = array();        $form_data['category_list'] = $this->catMgr->categoryList();		$form_data['action'] = 'Ajout';		// Liste des champs à uploader		$input_list = array('picture_1' => '"Photo principale de l\'article"',							'picture_2' => '"Photo bonus de l\'article"',		);				// En cas de modification		if($id != null && $this->artMgr->entryExists(array("id" => $id)))		{			$form_data['single_article'] = $this->artMgr->getArticle($id);			$form_data['action'] = 'Modification';			// Récupération des chemins de fichiers en bdd			$bdd_files = array();			foreach ($input_list as $key => $value) {				$bdd_files[$key] = $form_data['single_article']->$key;			}		}		        if ($this->form_validation->run('blogform') == FALSE)        {            $this->layout->view('admin/blog_form', $form_data); // appel FORMULAIRE        }        else		{			// Erreurs au niveau de l'upload			if(($form_data['upload_errors'] = $this->multiUploadCheck($input_list, $form_data['action'])) !== TRUE){				$this->layout->view('admin/blog_form', $form_data);				$this->upload->unlinkFiles();			} else {				$data_success['back_btn'] = anchor('mkadmin/blog/', 'RETOUR À LA LISTE', array("class" => "cancel-btn btn grey darken-1"));				$data_success['item'] = "article";				$data_success['entry_label'] = $this->input->post('title_fr');								$data_up = empty($this->uploadList($input_list, $form_data['action'])) ? FALSE : TRUE;								if($this->artMgr->editArticle($id, $data_up)){					if($id != null){						$this->unlinkExisting($bdd_files);					}				}				$this->layout->view('admin/success/formsuccess', $data_success);			}        }    }		/**	 * 	 * @param string $input	 * @param string $label	 * @param string $pth	 * @return type	 */	public function doUpload(string $input, string $label)	{		$config['upload_path']          = "./assets/img/blog/";		$config['allowed_types']        = 'jpg|png|jpeg';//		$config['max_size']             = 100;//		$config['max_width']            = 1524;//		$config['max_height']           = 1100;		$config['file_ext_tolower']     = TRUE;		$this->load->library('upload', $config);		$result = (bool) TRUE;				if(!$this->upload->do_upload($input, $label)){			$errors = $this->upload->display_errors("<span style='display: block'>", "</span>");			$result = FALSE;		}		return !$result ? $errors : $result;	}		/**	 * 	 * @param array $input_list	 * @param string $action	 * @return type	 */	public function multiUploadCheck(array $input_list, string $action = '') {		foreach ($input_list as $key => $value) {			if($action == 'Modification' && empty($_FILES[$key]['name'])){				unset($input_list[$key]);			}		}		if ($action != 'Modification' && empty($_FILES['picture_2']['name'])) {			unset($input_list['picture_2']);		}		$check = (bool) TRUE;				foreach ($input_list as $input => $label) {			if(($response = $this->doUpload($input, $label)) !== TRUE){				$errors = $response;				$check = FALSE;			}		}		return !$check ? $errors : $check;	}		/**	 * Deletes files replaced in DB	 * @param array $bdd_files	 */	public function unlinkExisting(array $bdd_files) {				$path = FCPATH;		foreach($bdd_files as $key => $val){			if(isset($this->upload->file_names[$key])			&& preg_match("/\.[a-zA-Z]{3,4}$/", $val)			&& preg_match("/\.[a-zA-Z]{3,4}$/", $this->upload->file_names[$key])			&& file_exists($path . $val)){				unlink($path . $val);			}		}	}	    private function countArticle() {        return (int) $this->artMgr->count();    }    public function deleteArticle($id) {        $this->artMgr->deleteArticle($id);		redirect(base_url('mkadmin/blog') ,'location');    }	/**	 * 	 * @param array $input_list	 * @param string $action	 * @return array	 */	public function uploadList(array $input_list, string $action = ''):array	{		foreach ($input_list as $key => $value) {			if($action == 'Modification' && empty($_FILES[$key]['name'])){				unset($input_list[$key]);			}		}		return $input_list;	}}